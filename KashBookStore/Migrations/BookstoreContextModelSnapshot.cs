// <auto-generated />
using System;
using KashBookStore.Models.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KashBookStore.Migrations
{
    [DbContext(typeof(BookstoreContext))]
    partial class BookstoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KashBookStore.Models.DomainModels.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            FirstName = "Michelle",
                            LastName = "Alexander"
                        },
                        new
                        {
                            AuthorID = 2,
                            FirstName = "Stephen E.",
                            LastName = "Ambrose"
                        },
                        new
                        {
                            AuthorID = 3,
                            FirstName = "Margaret",
                            LastName = "Atwood"
                        },
                        new
                        {
                            AuthorID = 4,
                            FirstName = "Jane",
                            LastName = "Austen"
                        },
                        new
                        {
                            AuthorID = 5,
                            FirstName = "James",
                            LastName = "Baldwin"
                        },
                        new
                        {
                            AuthorID = 6,
                            FirstName = "Emily",
                            LastName = "Bronte"
                        },
                        new
                        {
                            AuthorID = 7,
                            FirstName = "Agatha",
                            LastName = "Christie"
                        },
                        new
                        {
                            AuthorID = 8,
                            FirstName = "Ta-Nehisi",
                            LastName = "Coates"
                        },
                        new
                        {
                            AuthorID = 9,
                            FirstName = "Jared",
                            LastName = "Diamond"
                        },
                        new
                        {
                            AuthorID = 10,
                            FirstName = "Joan",
                            LastName = "Didion"
                        },
                        new
                        {
                            AuthorID = 11,
                            FirstName = "Daphne",
                            LastName = "Du Maurier"
                        },
                        new
                        {
                            AuthorID = 12,
                            FirstName = "Tina",
                            LastName = "Fey"
                        },
                        new
                        {
                            AuthorID = 13,
                            FirstName = "Roxane",
                            LastName = "Gay"
                        },
                        new
                        {
                            AuthorID = 14,
                            FirstName = "Dashiel",
                            LastName = "Hammett"
                        },
                        new
                        {
                            AuthorID = 15,
                            FirstName = "Frank",
                            LastName = "Herbert"
                        },
                        new
                        {
                            AuthorID = 16,
                            FirstName = "Aldous",
                            LastName = "Huxley"
                        },
                        new
                        {
                            AuthorID = 17,
                            FirstName = "Stieg",
                            LastName = "Larsson"
                        },
                        new
                        {
                            AuthorID = 18,
                            FirstName = "David",
                            LastName = "McCullough"
                        },
                        new
                        {
                            AuthorID = 19,
                            FirstName = "Toni",
                            LastName = "Morrison"
                        },
                        new
                        {
                            AuthorID = 20,
                            FirstName = "George",
                            LastName = "Orwell"
                        },
                        new
                        {
                            AuthorID = 21,
                            FirstName = "Mary",
                            LastName = "Shelley"
                        },
                        new
                        {
                            AuthorID = 22,
                            FirstName = "Sun",
                            LastName = "Tzu"
                        },
                        new
                        {
                            AuthorID = 23,
                            FirstName = "Augusten",
                            LastName = "Burroughs"
                        },
                        new
                        {
                            AuthorID = 25,
                            FirstName = "JK",
                            LastName = "Rowling"
                        },
                        new
                        {
                            AuthorID = 26,
                            FirstName = "Seth",
                            LastName = "Grahame-Smith"
                        });
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("BookID");

                    b.HasIndex("GenreID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            GenreID = "history",
                            Price = 18.0,
                            Title = "1776"
                        },
                        new
                        {
                            BookID = 2,
                            GenreID = "scifi",
                            Price = 5.5,
                            Title = "1984"
                        },
                        new
                        {
                            BookID = 3,
                            GenreID = "mystery",
                            Price = 4.5,
                            Title = "And Then There Were None"
                        },
                        new
                        {
                            BookID = 4,
                            GenreID = "history",
                            Price = 11.5,
                            Title = "Band of Brothers"
                        },
                        new
                        {
                            BookID = 5,
                            GenreID = "novel",
                            Price = 10.99,
                            Title = "Beloved"
                        },
                        new
                        {
                            BookID = 6,
                            GenreID = "memoir",
                            Price = 13.5,
                            Title = "Between the World and Me"
                        },
                        new
                        {
                            BookID = 7,
                            GenreID = "memoir",
                            Price = 4.25,
                            Title = "Bossypants"
                        },
                        new
                        {
                            BookID = 8,
                            GenreID = "scifi",
                            Price = 16.25,
                            Title = "Brave New World"
                        },
                        new
                        {
                            BookID = 9,
                            GenreID = "history",
                            Price = 15.0,
                            Title = "D-Day"
                        },
                        new
                        {
                            BookID = 10,
                            GenreID = "memoir",
                            Price = 12.5,
                            Title = "Down and Out in Paris and London"
                        },
                        new
                        {
                            BookID = 11,
                            GenreID = "scifi",
                            Price = 8.75,
                            Title = "Dune"
                        },
                        new
                        {
                            BookID = 12,
                            GenreID = "novel",
                            Price = 9.0,
                            Title = "Emma"
                        },
                        new
                        {
                            BookID = 13,
                            GenreID = "scifi",
                            Price = 6.5,
                            Title = "Frankenstein"
                        },
                        new
                        {
                            BookID = 14,
                            GenreID = "novel",
                            Price = 10.25,
                            Title = "Go Tell it on the Mountain"
                        },
                        new
                        {
                            BookID = 15,
                            GenreID = "history",
                            Price = 15.5,
                            Title = "Guns, Germs, and Steel"
                        },
                        new
                        {
                            BookID = 16,
                            GenreID = "memoir",
                            Price = 14.5,
                            Title = "Hunger"
                        },
                        new
                        {
                            BookID = 17,
                            GenreID = "mystery",
                            Price = 6.75,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            BookID = 18,
                            GenreID = "novel",
                            Price = 8.5,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookID = 19,
                            GenreID = "mystery",
                            Price = 10.99,
                            Title = "Rebecca"
                        },
                        new
                        {
                            BookID = 20,
                            GenreID = "history",
                            Price = 5.75,
                            Title = "The Art of War"
                        },
                        new
                        {
                            BookID = 21,
                            GenreID = "mystery",
                            Price = 8.5,
                            Title = "The Girl with the Dragon Tattoo"
                        },
                        new
                        {
                            BookID = 22,
                            GenreID = "scifi",
                            Price = 12.5,
                            Title = "The Handmaid's Tale"
                        },
                        new
                        {
                            BookID = 23,
                            GenreID = "mystery",
                            Price = 10.99,
                            Title = "The Maltese Falcon"
                        },
                        new
                        {
                            BookID = 24,
                            GenreID = "history",
                            Price = 13.75,
                            Title = "The New Jim Crow"
                        },
                        new
                        {
                            BookID = 25,
                            GenreID = "memoir",
                            Price = 13.5,
                            Title = "The Year of Magical Thinking"
                        },
                        new
                        {
                            BookID = 26,
                            GenreID = "novel",
                            Price = 9.0,
                            Title = "Wuthering Heights"
                        },
                        new
                        {
                            BookID = 27,
                            GenreID = "memoir",
                            Price = 11.0,
                            Title = "Running With Scissors"
                        },
                        new
                        {
                            BookID = 28,
                            GenreID = "novel",
                            Price = 8.75,
                            Title = "Pride and Prejudice and Zombies"
                        },
                        new
                        {
                            BookID = 29,
                            GenreID = "novel",
                            Price = 9.75,
                            Title = "Harry Potter and the Sorcerer's Stone"
                        });
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.BookAuthor", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            AuthorID = 18
                        },
                        new
                        {
                            BookID = 2,
                            AuthorID = 20
                        },
                        new
                        {
                            BookID = 3,
                            AuthorID = 7
                        },
                        new
                        {
                            BookID = 4,
                            AuthorID = 2
                        },
                        new
                        {
                            BookID = 5,
                            AuthorID = 19
                        },
                        new
                        {
                            BookID = 6,
                            AuthorID = 8
                        },
                        new
                        {
                            BookID = 7,
                            AuthorID = 12
                        },
                        new
                        {
                            BookID = 8,
                            AuthorID = 16
                        },
                        new
                        {
                            BookID = 9,
                            AuthorID = 2
                        },
                        new
                        {
                            BookID = 10,
                            AuthorID = 20
                        },
                        new
                        {
                            BookID = 11,
                            AuthorID = 15
                        },
                        new
                        {
                            BookID = 12,
                            AuthorID = 4
                        },
                        new
                        {
                            BookID = 13,
                            AuthorID = 21
                        },
                        new
                        {
                            BookID = 14,
                            AuthorID = 5
                        },
                        new
                        {
                            BookID = 15,
                            AuthorID = 9
                        },
                        new
                        {
                            BookID = 16,
                            AuthorID = 13
                        },
                        new
                        {
                            BookID = 17,
                            AuthorID = 7
                        },
                        new
                        {
                            BookID = 18,
                            AuthorID = 4
                        },
                        new
                        {
                            BookID = 19,
                            AuthorID = 11
                        },
                        new
                        {
                            BookID = 20,
                            AuthorID = 22
                        },
                        new
                        {
                            BookID = 21,
                            AuthorID = 17
                        },
                        new
                        {
                            BookID = 22,
                            AuthorID = 3
                        },
                        new
                        {
                            BookID = 23,
                            AuthorID = 14
                        },
                        new
                        {
                            BookID = 24,
                            AuthorID = 1
                        },
                        new
                        {
                            BookID = 25,
                            AuthorID = 10
                        },
                        new
                        {
                            BookID = 26,
                            AuthorID = 6
                        },
                        new
                        {
                            BookID = 27,
                            AuthorID = 23
                        },
                        new
                        {
                            BookID = 28,
                            AuthorID = 4
                        },
                        new
                        {
                            BookID = 28,
                            AuthorID = 26
                        },
                        new
                        {
                            BookID = 29,
                            AuthorID = 25
                        });
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.Genre", b =>
                {
                    b.Property<string>("GenreID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("GenreID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreID = "novel",
                            Name = "Novel"
                        },
                        new
                        {
                            GenreID = "memoir",
                            Name = "Memoir"
                        },
                        new
                        {
                            GenreID = "mystery",
                            Name = "mystery"
                        },
                        new
                        {
                            GenreID = "scifi",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            GenreID = "history",
                            Name = "History"
                        });
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.Book", b =>
                {
                    b.HasOne("KashBookStore.Models.DomainModels.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KashBookStore.Models.DomainModels.BookAuthor", b =>
                {
                    b.HasOne("KashBookStore.Models.DomainModels.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KashBookStore.Models.DomainModels.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KashBookStore.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KashBookStore.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KashBookStore.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KashBookStore.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
