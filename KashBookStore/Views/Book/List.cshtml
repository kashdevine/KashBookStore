@model KashBookStore.Models.ViewModels.BookListViewModel;

@{
    ViewData["Title"] = " | Book Catalog";
    KashBookStore.Models.Grid.RouteDictionary current = Model.CurrentRoute;
    KashBookStore.Models.Grid.RouteDictionary routes = Model.CurrentRoute.Clone();
}

<h1>Book Catalog</h1>

<div class="row">
    <div class="col-9">
        <form asp-controller="Book" asp-action="Filter" method="post" class="form-inline">
            <label>Author:</label>
            <select name="filter" class="form-control m-2"
                    asp-items="@(new SelectList(
                    Model.Authors, "AuthorID", "FullName", current.AuthorFilter))">
                <option value="@KashBookStore.Models.DTOs.BookGridDTO.DefaultFilter">All</option>
            </select>

            <label>Genre:</label>
            <select name="filter" class="form-control m-2"
                    asp-items="@(new SelectList(
                    Model.Genres, "GenreID", "Name", current.GenreFilter))">
                <option value="@KashBookStore.Models.DTOs.BookGridDTO.DefaultFilter">All</option>
            </select>

            <label>Price:</label>
            <select name="filter" class="form-control m-2"
                    asp-items="@(new SelectList(
                    Model.Prices, "Key", "Value", current.PriceFilter))">
                <option value="@KashBookStore.Models.DTOs.BookGridDTO.DefaultFilter">All</option>
            </select>

            <button type="submit" class="btn btn-primary mr-2">Filter</button>
            <button type="submit" class="btn btn-primary" name="clear" value="true">Clear</button>
        </form>
    </div>

    <div class="col">
        @*Page-size form*@
        <form asp-controller="Book" asp-action="PageSize" method="post" class="form-inline">
            <label>Page Size:</label>
            <select name="pagesize" class="form-control m-2" asp-items="@(new SelectList(Model.PageSizes, current.PageSize))">
            </select>
            <button type="submit" class="btn btn-primary mr-2">Save</button>
        </form>
    </div>
</div>

@*Add to Cart form*@
<form asp-controller="Cart" asp-action="Add" method="post">
    <table class="table table-bordered table-striped table-sm">
        @* for each sortable table column, update the route dictionary with the field to sort by, and then
            use that route dictionary and the current route to create route segments for sorting link*@
        <thead class="thead-dark">
            <tr>
                <th>
                    @{ routes.SetSortAndDirection(nameof(KashBookStore.Models.DomainModels.Book.Title), current);}
                    <a asp-controller="Book" asp-action="List" asp-all-route-data="@routes" class="text-white">Title</a>
                </th>
                <th>Author(s)</th>
                <th>
                    @{ routes.SetSortAndDirection(nameof(KashBookStore.Models.DomainModels.Genre), current);}
                    <a asp-controller="Book" asp-action="List" asp-all-route-data="@routes" class="text-white">Genre</a>
                </th>
                <th>
                    @{ routes.SetSortAndDirection(nameof(KashBookStore.Models.DomainModels.Book.Price), current);}
                    <a asp-controller="Book" asp-action="List" asp-all-route-data="@routes" class="text-white">Price</a>
                </th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (KashBookStore.Models.DomainModels.Book book in Model.Books)
            {
                <tr>
                    <td>
                        <a asp-controller="Book" asp-action="Details" asp-route-id="@book.BookID">@book.Title</a>
                    </td>
                    <td>
                        @foreach (var ba in book.BookAuthors)
                        {
                            <p>
                                <a asp-controller="Autor" asp-action="Details" asp-route-id="@ba.AuthorID">@ba.Author.FullName</a>
                            </p>
                        }
                    </td>
                    <td>
                        @book.Genre.Name
                    </td>
                    <td>
                        @book.Price.ToString("c")
                    </td>
                    <td>
                        <button type="submit" name="id" value="@book.BookID" class="btn btn-primary">Add to Cart</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>

@*Paging Links*@
@{
    @*Reset the route dictionary to the current route values. This is necessary to
        clear the changes made while creating the ssorting links above. Clone
        so don't overwrite current route segment values. *@
    routes = Model.CurrentRoute.Clone();



    @* update route dictionary with page number in 'i' and then use
        updated route dictionary to create route segments for paging link*@
    for (int i = 1; i <= Model.TotalPages; i++)
    {
        routes.PageNumber = i;
        <a asp-controller="Book" asp-action="List" asp-all-route-data="@routes"
           class="btn btn-outline-primary @KashBookStore.Models.ViewModels.Nav.Active(i, current.PageNumber)">@i</a>
    }
}